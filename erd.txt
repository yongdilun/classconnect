-- ClassConnect Database Schema
-- Updated to match current implementation while preserving all tables

-- Use the database
USE ClassConnect;
GO

-- Users Table (Base table for all user types)
CREATE TABLE users (
    user_id INT PRIMARY KEY IDENTITY(1,1),
    email VARCHAR(255) NOT NULL UNIQUE,
    password_hash VARCHAR(255) NOT NULL,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    profile_picture VARCHAR(255),
    date_registered DATETIME NOT NULL DEFAULT GETDATE(),
    last_login DATETIME,
    user_role VARCHAR(20) NOT NULL CHECK (user_role IN ('admin', 'teacher', 'student')),
    is_active BIT NOT NULL DEFAULT 1
);

-- Students Table (Extends Users)
CREATE TABLE students (
    student_id INT PRIMARY KEY,
    grade_level VARCHAR(50),
    enrollment_date DATE NOT NULL DEFAULT GETDATE(),
    FOREIGN KEY (student_id) REFERENCES users(user_id)
);

-- Teachers Table (Extends Users)
CREATE TABLE teachers (
    teacher_id INT PRIMARY KEY,
    department VARCHAR(100),
    hire_date DATE,
    bio TEXT,
    FOREIGN KEY (teacher_id) REFERENCES users(user_id)
);

-- Teacher Profiles Table (For our current implementation)
CREATE TABLE teacher_profiles (
    profile_id INT PRIMARY KEY IDENTITY(1,1),
    user_id INT NOT NULL UNIQUE,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    department VARCHAR(100),
    hire_date DATE DEFAULT GETDATE(),
    profile_picture VARCHAR(255),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

-- Student Profiles Table (For our current implementation)
CREATE TABLE student_profiles (
    profile_id INT PRIMARY KEY IDENTITY(1,1),
    user_id INT NOT NULL UNIQUE,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    grade_level VARCHAR(50),
    enrollment_date DATE DEFAULT GETDATE(),
    profile_picture VARCHAR(255),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

-- Password Reset Tokens Table
CREATE TABLE password_resets (
    reset_id INT PRIMARY KEY IDENTITY(1,1),
    user_id INT NOT NULL,
    token VARCHAR(255) NOT NULL,
    expires_at DATETIME NOT NULL,
    created_at DATETIME NOT NULL DEFAULT GETDATE(),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

-- Classes Table
CREATE TABLE classes (
    class_id INT PRIMARY KEY IDENTITY(1,1),
    class_name VARCHAR(255) NOT NULL,
    class_code VARCHAR(10) NOT NULL UNIQUE,
    description TEXT,
    subject VARCHAR(100),
    created_date DATETIME NOT NULL DEFAULT GETDATE(),
    is_archived BIT NOT NULL DEFAULT 0,
    theme_color VARCHAR(20) DEFAULT 'blue',
    creator_id INT NOT NULL,
    FOREIGN KEY (creator_id) REFERENCES users(user_id)
);

-- Student-Class Enrollment Table
CREATE TABLE class_enrollments (
    enrollment_id INT PRIMARY KEY IDENTITY(1,1),
    user_id INT NOT NULL,
    class_id INT NOT NULL,
    enrollment_date DATETIME NOT NULL DEFAULT GETDATE(),
    is_active BIT NOT NULL DEFAULT 1,
    UNIQUE (user_id, class_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (class_id) REFERENCES classes(class_id)
);

-- Teacher-Class Assignment Table
CREATE TABLE class_teachers (
    class_teacher_id INT PRIMARY KEY IDENTITY(1,1),
    user_id INT NOT NULL,
    class_id INT NOT NULL,
    is_owner BIT NOT NULL DEFAULT 0,
    added_date DATETIME NOT NULL DEFAULT GETDATE(),
    UNIQUE (user_id, class_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (class_id) REFERENCES classes(class_id)
);

-- Assignment Types Table
CREATE TABLE assignment_types (
    type_id INT PRIMARY KEY IDENTITY(1,1),
    type_name VARCHAR(50) NOT NULL UNIQUE,
    description TEXT
);

-- Assignments Table
CREATE TABLE assignments (
    assignment_id INT PRIMARY KEY IDENTITY(1,1),
    class_id INT NOT NULL,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    type_id INT,
    points_possible FLOAT NOT NULL DEFAULT 100,
    due_date DATETIME,
    created_date DATETIME NOT NULL DEFAULT GETDATE(),
    published_date DATETIME,
    is_published BIT NOT NULL DEFAULT 0,
    allow_late_submissions BIT NOT NULL DEFAULT 1,
    created_by INT NOT NULL,
    FOREIGN KEY (class_id) REFERENCES classes(class_id),
    FOREIGN KEY (type_id) REFERENCES assignment_types(type_id),
    FOREIGN KEY (created_by) REFERENCES users(user_id)
);

-- Assignment Materials Table
CREATE TABLE assignment_materials (
    material_id INT PRIMARY KEY IDENTITY(1,1),
    assignment_id INT NOT NULL,
    file_name VARCHAR(255) NOT NULL,
    file_type VARCHAR(50) NOT NULL,
    file_size FLOAT NOT NULL,
    file_path VARCHAR(255) NOT NULL,
    upload_date DATETIME NOT NULL DEFAULT GETDATE(),
    FOREIGN KEY (assignment_id) REFERENCES assignments(assignment_id)
);

-- Submissions Table
CREATE TABLE submissions (
    submission_id INT PRIMARY KEY IDENTITY(1,1),
    assignment_id INT NOT NULL,
    user_id INT NOT NULL,
    submission_date DATETIME NOT NULL DEFAULT GETDATE(),
    is_late BIT NOT NULL DEFAULT 0,
    status VARCHAR(20) NOT NULL DEFAULT 'submitted' CHECK (status IN ('draft', 'submitted', 'returned', 'graded')),
    grade FLOAT,
    feedback TEXT,
    graded_by INT,
    graded_date DATETIME,
    UNIQUE (assignment_id, user_id),
    FOREIGN KEY (assignment_id) REFERENCES assignments(assignment_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (graded_by) REFERENCES users(user_id)
);

-- Submission Files Table
CREATE TABLE submission_files (
    file_id INT PRIMARY KEY IDENTITY(1,1),
    submission_id INT NOT NULL,
    file_name VARCHAR(255) NOT NULL,
    file_type VARCHAR(50) NOT NULL,
    file_size FLOAT NOT NULL,
    file_path VARCHAR(255) NOT NULL,
    upload_date DATETIME NOT NULL DEFAULT GETDATE(),
    FOREIGN KEY (submission_id) REFERENCES submissions(submission_id)
);

-- Announcements Table
CREATE TABLE announcements (
    announcement_id INT PRIMARY KEY IDENTITY(1,1),
    class_id INT NOT NULL,
    title VARCHAR(255) NOT NULL,
    content TEXT NOT NULL,
    created_by INT NOT NULL,
    created_date DATETIME NOT NULL DEFAULT GETDATE(),
    scheduled_date DATETIME,
    is_published BIT NOT NULL DEFAULT 1,
    FOREIGN KEY (class_id) REFERENCES classes(class_id),
    FOREIGN KEY (created_by) REFERENCES users(user_id)
);

-- Comments Table
CREATE TABLE comments (
    comment_id INT PRIMARY KEY IDENTITY(1,1),
    content TEXT NOT NULL,
    created_by INT NOT NULL,
    created_date DATETIME NOT NULL DEFAULT GETDATE(),
    parent_comment_id INT,
    is_private BIT NOT NULL DEFAULT 0,
    reference_type VARCHAR(20) NOT NULL CHECK (reference_type IN ('assignment', 'announcement', 'submission')),
    reference_id INT NOT NULL,
    FOREIGN KEY (created_by) REFERENCES users(user_id),
    FOREIGN KEY (parent_comment_id) REFERENCES comments(comment_id)
);

-- Class Materials Table
CREATE TABLE class_materials (
    material_id INT PRIMARY KEY IDENTITY(1,1),
    class_id INT NOT NULL,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    file_name VARCHAR(255),
    file_type VARCHAR(50),
    file_size FLOAT,
    file_path VARCHAR(255),
    external_link VARCHAR(255),
    created_by INT NOT NULL,
    created_date DATETIME NOT NULL DEFAULT GETDATE(),
    folder_path VARCHAR(255),
    FOREIGN KEY (class_id) REFERENCES classes(class_id),
    FOREIGN KEY (created_by) REFERENCES users(user_id)
);

-- Notifications Table
CREATE TABLE notifications (
    notification_id INT PRIMARY KEY IDENTITY(1,1),
    user_id INT NOT NULL,
    title VARCHAR(255) NOT NULL,
    message TEXT NOT NULL,
    created_date DATETIME NOT NULL DEFAULT GETDATE(),
    is_read BIT NOT NULL DEFAULT 0,
    notification_type VARCHAR(50) NOT NULL,
    reference_type VARCHAR(20) CHECK (reference_type IN ('assignment', 'announcement', 'submission', 'comment', 'enrollment')),
    reference_id INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

-- User Settings Table
CREATE TABLE user_settings (
    setting_id INT PRIMARY KEY IDENTITY(1,1),
    user_id INT NOT NULL UNIQUE,
    email_notifications BIT NOT NULL DEFAULT 1,
    push_notifications BIT NOT NULL DEFAULT 1,
    theme VARCHAR(20) DEFAULT 'light',
    language VARCHAR(10) DEFAULT 'en',
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

-- Calendar Events Table
CREATE TABLE calendar_events (
    event_id INT PRIMARY KEY IDENTITY(1,1),
    user_id INT NOT NULL,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    start_time DATETIME NOT NULL,
    end_time DATETIME,
    is_all_day BIT NOT NULL DEFAULT 0,
    event_type VARCHAR(50) NOT NULL,
    reference_type VARCHAR(20) CHECK (reference_type IN ('assignment', 'announcement', 'custom')),
    reference_id INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);
